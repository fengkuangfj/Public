#pragma once

#include <Windows.h>
#include <tchar.h>

#include "..\\PrintfEx\\PrintfEx.h"

#define MOD_OPERATION_SYSTEM_VERSION _T("操作系统版本")

// https://msdn.microsoft.com/zh-cn/office/ms724832
typedef enum _OS_VERSION_USER_DEFINED
{
	OS_VERSION_UNKNOWN,
	OS_VERSION_WINDOWS_2000,
	OS_VERSION_WINDOWS_SERVER,
	OS_VERSION_WINDOWS_HOME_SERVER,
	OS_VERSION_WINDOWS_SERVER_2003,
	OS_VERSION_WINDOWS_SERVER_2008,
	OS_VERSION_WINDOWS_SERVER_2008_R2,
	OS_VERSION_WINDOWS_XP,
	OS_VERSION_WINDOWS_XP_SP1,
	OS_VERSION_WINDOWS_XP_SP2,
	OS_VERSION_WINDOWS_XP_SP3,
	OS_VERSION_WINDOWS_VISTA,
	OS_VERSION_WINDOWS_VISTA_PS1,
	OS_VERSION_WINDOWS_VISTA_PS2,
	OS_VERSION_WINDOWS_7,
	OS_VERSION_WINDOWS_7_SP1,
	OS_VERSION_WINDOWS_8,
	OS_VERSION_WINDOWS_SERVER_2012,
	OS_VERSION_WINDOWS_8_POINT1,
	OS_VERSION_WINDOWS_SERVER_2012_R2,
	OS_VERSION_WINDOWS_10,
	OS_VERSION_WINDOWS_SERVER_2016_TECHNICAL_PREVIEW
} OS_VERSION_USER_DEFINED, *POS_VERSION_USER_DEFINED;

typedef enum _OS_PROCESSOR_TYPE_USER_DEFINED
{
	OS_PROCESSOR_TYPE_UNKNOWN,
	OS_PROCESSOR_TYPE_X86,
	OS_PROCESSOR_TYPE_X64
} OS_PROCESSOR_TYPE_USER_DEFINED, *POS_PROCESSOR_TYPE_USER_DEFINED;

typedef BOOL(WINAPI *IS_WINDOWS_SERVER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_10_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_8_POINT_1_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_8_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_7_SP_1_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_7_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_VISTA_SP2_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_VISTA_SP1_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_VISTA_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_XP_SP3_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_XP_SP2_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_XP_SP1_OR_GREATER)(void);
typedef BOOL(WINAPI *IS_WINDOWS_XP_OR_GREATER)(void);
typedef BOOL(WINAPI *GET_VERSION_EX)(LPOSVERSIONINFO);
typedef VOID (NTAPI* RTL_GET_NT_VERSION_NUMBERS)(LPDWORD pdwMajorVersion, LPDWORD pdwMinorVersion, LPDWORD pdwBuildNumber);

class COperationSystemVersion
{
public:
	static
		COperationSystemVersion *
		GetInstance();

	static
		VOID
		ReleaseInstance();

	OS_VERSION_USER_DEFINED
		GetOSVersion();

	OS_PROCESSOR_TYPE_USER_DEFINED
		GetOSProcessorType();

private:
	static COperationSystemVersion	*	ms_pInstance;

	OS_VERSION_USER_DEFINED				m_OsVersionUserDefined;
	OS_PROCESSOR_TYPE_USER_DEFINED		m_ProcessorTypeUserDefined;

	HMODULE								m_hModuleKernel32;
	HMODULE								m_hModuleNtdll;

	IS_WINDOWS_SERVER					m_pfIsWindowsServer;
	IS_WINDOWS_10_OR_GREATER			m_pfIsWindows1OrGreater;
	IS_WINDOWS_8_POINT_1_OR_GREATER		m_pfIsWindows8Point1OrGreater;
	IS_WINDOWS_8_OR_GREATER				m_pfIsWindows8OrGreater;
	IS_WINDOWS_7_SP_1_OR_GREATER		m_pfIsWindows7SP1OrGreater;
	IS_WINDOWS_7_OR_GREATER				m_pfIsWindows7OrGreater;
	IS_WINDOWS_VISTA_SP2_OR_GREATER		m_pfIsWindowsVistaSP2OrGreater;
	IS_WINDOWS_VISTA_SP1_OR_GREATER		m_pfIsWindowsVistaSP1OrGreater;
	IS_WINDOWS_VISTA_OR_GREATER			m_pfIsWindowsVistaOrGreater;
	IS_WINDOWS_XP_SP3_OR_GREATER		m_pfIsWindowsXPSP3OrGreater;
	IS_WINDOWS_XP_SP2_OR_GREATER		m_pfIsWindowsXPSP2OrGreater;
	IS_WINDOWS_XP_SP1_OR_GREATER		m_pfIsWindowsXPSP1OrGreater;
	IS_WINDOWS_XP_OR_GREATER			m_pfIsWindowsXPOrGreater;
	GET_VERSION_EX						m_pfGetVersionEx;
	RTL_GET_NT_VERSION_NUMBERS			m_pfRtlGetNtVersionNumbers;

	COperationSystemVersion();

	~COperationSystemVersion();

	BOOL
		Init();

	BOOL
		Unload();

	OS_VERSION_USER_DEFINED
		GetOSVersionByIsOrGreater();

	OS_VERSION_USER_DEFINED
		GetOSVersionByGetVersionEx();

	OS_VERSION_USER_DEFINED
		GetOSVersionByRtlGetNtVersionNumbersAndGetVersionEx();

	OS_PROCESSOR_TYPE_USER_DEFINED
		GetOSProcessorTypeInternal();
};
